#!/bin/bash

# 確認
if [ $UID != 0 ]; then
    echo "Rootユーザもしくはsudo権限を持ったユーザで実行する必要があります" 1>&2
    exit 1
fi

# 設定ファイルの読み込み
# $WORKDIR $EXCLUDES $LIVEUSER $LIVECDLABEL $CUSTOMISO $SQUASHFSOPTS
# $BACKUPSHOWINSTALL $LIVECDURL $DISTICONS $DISTLOCALE $DISTNAME
. /etc/serenebuilder.conf

# 変数の定義
ARCH=amd64
SUBARCH=generic
CDBOOTTYPE="ISOLINUX"
UBUNTUVERSION=$(lsb_release -r | awk '{print$2}' | cut -d. -f1)
BASEWORKDIR="${WORKDIR}"
WORKDIR="${WORKDIR}/serenebuilder"
serenebuilderVERSION="1.0"
OPT1="dist"
LIVEUSER="$(echo ${LIVEUSER} | awk {print tolower ($0)})"

# 作業ディレクトリの存在確認
if [ ! -d ${WORKDIR} ] ; then
    mkdir -p ${WORKDIR}
    if [ ! -d ${WORKDIR} ] ; then
      echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      echo "! 作業ディレクトリの作成が出来ませんでした !"
      echo "!     ${WORKDIR} !"
      echo "! Serene-Builderを終了します               !"
      echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      exit 1
    fi
fi

# 移動
cd ${WORKDIR}

# ログファイルの作成
if [ -f ${WORKDIR}/serenebuilder.log ] ; then
    echo -e "\n\n\n\n== serenebuilder.log file already exists\n== not removing log file, just adding to it\n" >> ${WORKDIR}/serenebuilder.log
fi

touch ${WORKDIR}/serenebuilder.log
cat >> ${WORKDIR}/serenebuilder.log <<EOF

       ===============================
       ==  serenebuilder log  file  ==
       ===============================
           serenebuilder  $serenebuilderVERSION

       Distribution Mode Selected

EOF

log_msg() {
    echo "$1"
    echo "$1" >>${WORKDIR}/serenebuilder.log
}
tee_log="tee -a ${WORKDIR}/serenebuilder.log"

if [ "${CUSTOMISO}" == "serenebuilder.iso" ] ; then
    CUSTOMISO="serenebuilder_dist.iso"
fi

#システム情報の出力
echo " System info:" >>${WORKDIR}/serenebuilder.log

if [ -e "/sys/firmware/efi/efivars/*" ] ; then
  BOOT_FIRMWARE="EFI"
  echo "EFI vars found in /sys/firmware/efi/efivars/" >>${WORKDIR}/serenebuilder.log
else
  BOOT_FIRMWARE="BIOS"
  echo "no EFI vars found in /sys/firmware/efi/efivars/" >>${WORKDIR}/serenebuilder.log
fi

# Ubiquityのスライドショーがインストール済みか確認
slideshow_present=`dpkg --get-selections | grep 'slideshow'`
if [ ! "${slideshow_present}" ] ; then
  bodhi_slideshow_present=`dpkg --get-selections | grep 'bodhi-slideshow'`
  if [ ! "${bodhi_slideshow_present}" ] ; then
    log_msg "No slideshow installed for ubiquity"
    exit 1
  fi
fi

# UID/GID 990番が未使用か確認
uid_990_check=$(id 990 | grep -o 'uid=990')
uid_990_name=$(id 990 | cut -d\( -f2 | cut -d\) -f1)
gid_990_check=$(grep '^.*:.*:990:' /etc/group)
gid_990_name=$(grep '^.*:.*:990:' /etc/group | cut -d\:  -f1)

if [ "${uid_990_check}" -o "${gid_990_check}" ] ; then
    if [ "${uid_990_check}" == "uid=990" -a "${gid_990_check}" ] ; then
        log_msg ""
        log_msg " !!!!! 警告 !!!!!"
        log_msg ""
        log_msg " UID 990 = ${uid_990_name}(ユーザ名)"
        log_msg " GID 990 = ${gid_990_name}(グループ名)"
        log_msg ""
        log_msg " serenebuilderはUID990, GID990番を必要とします"
        echo -n " (続行するには何かキーを押してください) "
        read -n1 redy
        exit 1
    fi

    if [ "${uid_990_check}" == "uid=990" ] ; then
        log_msg ""
        log_msg " !!!!! 警告 !!!!!"
        log_msg ""
        log_msg " UID990番は使用済みです:  ${uid_990_name}(ユーザ名)"
        echo -n " (続行するには何かキーを押してください) "
        read -n1 redy
        exit 1

    fi

    if [ "${gid_990_check}" ] ; then
        log_msg ""
        log_msg " !!!!! error !!!!!"
        log_msg ""
        log_msg " GID990番は使用済みです: ${gid_990_name}(グループ名)"
        echo -n " (続行するには何かキーを押してください) "
        read -n1 redy
        exit 1
    fi
else
    log_msg " GID & UID 990 are not in use, that's good"
fi

log_msg "不要なパッケージの削除を行いシステムをクリーンアップします"
apt-get clean

log_msg "serenebuilder-firstbootを有効化します"
cp -f /etc/bodhibuilder/firstboot/file-firstboot /etc/init.d/bodhibuilder-firstboot
sed -i 's/__DISTNAME__/'"${DISTNAME}"'/g' /etc/init.d/bodhibuilder-firstboot
chmod 755 /etc/init.d/bodhibuilder-firstboot
update-rc.d bodhibuilder-firstboot defaults

# caspersのユーザUIDを変更
sed -i -e 's@user-uid [0-9]*@user-uid 990@' /usr/share/initramfs-tools/scripts/casper-bottom/*adduser

#popularity-contestをインストール
apt-get -y -q remove popularity-contest &> /dev/null

# ubiquity.desktopを配置
if [ -e /usr/share/applications/ubiquity.desktop ] ; then
    yes | mv -v /usr/share/applications/ubiquity.desktop /usr/share/applications/ubiquity.desktop_TEMP | ${tee_log}
fi

log_msg "GTKフロントエンドのUbiquityをインストール"
ubiquity_frontend_gtk_status=$(dpkg --get-selections | grep ubiquity-frontend-gtk)
if [ "${ubiquity_frontend_gtk_status}" ] ; then
    apt-get -y -q remove ubiquity-frontend-gtk &>> ${WORKDIR}/bodhibuilder.log
    sleep 1
else
    echo "ubiquity-frontend-gtk not initially installed" >> ${WORKDIR}/bodhibuilder.log
fi
apt-get -y -q install ubiquity-frontend-gtk &>> ${WORKDIR}/bodhibuilder.log

# ubiquity.desktopをレストア
if [ -e /usr/share/applications/ubiquity.desktop_TEMP ] ; then
    yes | mv -v /usr/share/applications/ubiquity.desktop_TEMP /usr/share/applications/ubiquity.desktop | ${tee_log}
fi

# 使用中のディスプレイマネージャを確認
currentdm_path="`cat /etc/X11/default-display-manager`"
  currentdm=`basename ${currentdm_path}`
  log_msg "Current Display Manager (currentdm) is ${currentdm}  @  ${currentdm_path}"

log_msg "${LIVECDLABEL}にディストリビューション名を書き換え"
sed -i 's/PRETTY_NAME=.*/PRETTY_NAME="LIVECDLABEL"/g' /usr/lib/os-release
sed -i "s/LIVECDLABEL/${LIVECDLABEL}/g" /usr/lib/os-release

sleep 1

# CDツリーを作成
if [ -d "${WORKDIR}/dummysys" ] ; then
    rm -rf ${WORKDIR}/dummysys/var/*
    rm -rf ${WORKDIR}/dummysys/etc/*
    rm -rf ${WORKDIR}/dummysys/run/*
    rm -rf ${WORKDIR}/ISOTMP/{isolinux,grub,.disk}
else
    log_msg "Creating ${WORKDIR} folder tree"
    mkdir -vp ${WORKDIR}/ISOTMP/{casper,preseed}
    mkdir -vp ${WORKDIR}/dummysys/{dev,etc,proc,tmp,sys,mnt,media/cdrom,var}
    rsync -a /dev/urandom ${WORKDIR}/dummysys/dev/
    if [ -d /run ] ; then
        mkdir -vp ${WORKDIR}/dummysys/run
    fi
    chmod ug+rwx,o+rwt ${WORKDIR}/dummysys/tmp
fi

mkdir -vp ${WORKDIR}/ISOTMP/{isolinux,install,.disk}

log_msg "/varと/etcをCDツリーにコピー"

unset ALLEXCLUDES
unset VAREXCLUDES
unset ETCEXCLUDES

if [ "${EXCLUDES}" ] ; then
    echo "EXCLUDES variable is not empty" >> ${WORKDIR}/bodhibuilder.log
    for add in ${EXCLUDES} ; do # all exclusions
        ALLEXCLUDES="${ALLEXCLUDES} --exclude='${add}' "
    done
    for addvar in ${EXCLUDES} ; do # exclusions in the var dir
        addvaryes=`echo ${addvar} | grep '/var/'`
        if [ "${addvaryes}" ] ; then
            VAREXCLUDES="${VAREXCLUDES} --exclude='${addvaryes}' "
        fi
    done

    VAREXCLUDES=`echo ${VAREXCLUDES} | sed 's/\/var\//\//g'`
    echo "" >> ${WORKDIR}/bodhibuilder.log
    echo "   Edited VAREXCLUDES IS:" >> ${WORKDIR}/bodhibuilder.log
    echo "${VAREXCLUDES}" >> ${WORKDIR}/bodhibuilder.log
    for addetc in ${EXCLUDES} ; do # exclusions in the etc dir
        addetcyes=`echo ${addetc} | grep '/etc/'`
        if [ "${addetcyes}" ] ; then
            ETCEXCLUDES="${ETCEXCLUDES} --exclude='${addetcyes}' "
        fi
    done

    ETCEXCLUDES=`echo ${ETCEXCLUDES} | sed 's/\/etc\//\//g'` # Cleanup path for etc exclusions for rsync
    echo "" >> ${WORKDIR}/bodhibuilder.log
    echo "   Edited ETCEXCLUDES IS:" >> ${WORKDIR}/bodhibuilder.log
    echo "${ETCEXCLUDES}" >> ${WORKDIR}/bodhibuilder.log
fi

# /etcと/varをrsyncする
var_sync="rsync -a --exclude='*.log.[0-9]*' --exclude='*.log.old' --exclude='syslog.[0-9]*' --exclude='[bw]tmp.[0-9]*' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' --exclude='kdecache*' --exclude='*~' ${VAREXCLUDES} /var/. ${WORKDIR}/dummysys/var/."
echo "   syncing /var/ directory using:" >> ${WORKDIR}/bodhibuilder.log
echo "> ${var_sync}" >> ${WORKDIR}/bodhibuilder.log
eval ${var_sync}

etc_sync="rsync -a ${ETCEXCLUDES} /etc/. ${WORKDIR}/dummysys/etc/."
echo "   syncing /etc/ directory using:" >> ${WORKDIR}/bodhibuilder.log
echo "> ${etc_sync}" >> ${WORKDIR}/bodhibuilder.log
eval ${etc_sync}
echo "done syncing" >> ${WORKDIR}/bodhibuilder.log

# sources.listをバックアップ
yes | cp -p ${WORKDIR}/dummysys/etc/apt/sources.list ${WORKDIR}/dummysys/etc/bodhibuilder/apt/sources.list_BB
#Adding packages location to sources
DISKINFONAME=`echo $LIVECDLABEL | awk '{print $1}'`
log_msg "Adding CD-ROM to source list"
. /etc/lsb-release
sed -i '/cdrom:/d' ${WORKDIR}/dummysys/etc/apt/sources.list &> /dev/null
echo "deb [trusted=yes] file:/cdrom/dists/ ./  # ISO repo - BB" >> ${WORKDIR}/dummysys/etc/apt/sources.list
echo "-- File Content of  ${WORKDIR}/dummysys/etc/apt/sources.list --" >> ${WORKDIR}/bodhibuilder.log
cat ${WORKDIR}/dummysys/etc/apt/sources.list >> ${WORKDIR}/bodhibuilder.log
echo "" >> ${WORKDIR}/bodhibuilder.log
echo "-- File Content of  /etc/apt/sources.list --" >> ${WORKDIR}/bodhibuilder.log
cat /etc/apt/sources.list >> ${WORKDIR}/bodhibuilder.log
echo "---------------------------" >> ${WORKDIR}/bodhibuilder.log

# GRUB設定を変更
if [ -e /etc/bodhibuilder/grub/grub.bodhi ] ; then
    log_msg "Found custom grub for ${DISTNAME}"
    cp -f /etc/bodhibuilder/grub/grub.bodhi ${WORKDIR}/dummysys/etc/default/
    chmod 644 ${WORKDIR}/dummysys/etc/default/grub.bodhi
    cp -f /etc/bodhibuilder/grub/grub.bodhi ${WORKDIR}/dummysys/etc/default/grub
    if [ -d /etc/bodhibuilder/grub/backgrounds ] ; then
        cp -rf /etc/bodhibuilder/grub/backgrounds/ ${WORKDIR}/dummysys/etc/grub.d/
    fi
fi

# GRUBにシステム名を書き込み
if [ "${DISTNAME}" ] ; then
    if [ -e "${WORKDIR}/dummysys/etc/lsb-release" ] ; then
        sed -i "s/^DISTRIB_DESCRIPTION=.*$/DISTRIB_DESCRIPTION=\"Ubuntu\"/" ${WORKDIR}/dummysys/etc/lsb-release
        sed -i 's/^GRUB_DISTRIBUTOR=.*$/GRUB_DISTRIBUTOR=\`lsb_release -d -s 2> \/dev\/null || echo Debian\`/' ${WORKDIR}/dummysys/etc/default/grub.bodhi
        sed -i 's/^GRUB_DISTRIBUTOR=.*$/GRUB_DISTRIBUTOR=\`lsb_release -d -s 2> \/dev\/null || echo Debian\`/' ${WORKDIR}/dummysys/etc/default/grub
    else
        sed -i 's/^GRUB_DISTRIBUTOR=.*$/GRUB_DISTRIBUTOR=Ubuntu/' ${WORKDIR}/dummysys/etc/default/grub
    fi
fi

# DPMSとスクリーンセーバをインストール
if [ "${which_desktop}" != "enlightenment" ] ; then # enlightenment & moksha use a different method for startup scripts
    if [ ! -f ${WORKDIR}/dummysys/etc/skel/.config/autostart/iso_boot_script.desktop ] ; then
        mkdir -p ${WORKDIR}/dummysys/etc/skel/.config/autostart/
        cp -f /etc/bodhibuilder/isofiles/iso_boot_script.desktop ${WORKDIR}/dummysys/etc/skel/.config/autostart/iso_boot_script.desktop
    fi
fi

# ブート時にrc.localを走らせる
cp -f /etc/bodhibuilder/isofiles/rc.local ${WORKDIR}/dummysys/etc/rc.local
chmod 755 ${WORKDIR}/dummysys/etc/rc.local
sed -i "s/__LIVEUSER__/${LIVEUSER}/g" ${WORKDIR}/dummysys/etc/rc.local

log_msg "Cleaning up files not needed for the live in ${WORKDIR}/dummysys"
rm -rf ${WORKDIR}/dummysys/etc/apt/sources.list.d/*.save &> /dev/null
rm -rf ${WORKDIR}/dummysys/etc/apt/apt.conf.d/* &> /dev/null
rm -rf ${WORKDIR}/dummysys/etc/apt/preferences.d/* &> /dev/null
rm -rf ${WORKDIR}/dummysys/var/lib/apt/lists/* -vf &> /dev/null
rm -rf ${WORKDIR}/dummysys/var/lib/apt/lists/lock &> /dev/null
find ${WORKDIR}/dummysys/var/cache/apt -type f -exec rm -rf '{}' \; &> /dev/null
find ${WORKDIR}/dummysys/var/cache/apt-xapian-index -type f -exec rm -rf '{}' \; &> /dev/null
find ${WORKDIR}/dummysys/var/lib/apt -type f -exec rm -rf '{}' \; &> /dev/null
rm -rf ${WORKDIR}/dummysys/var/lib/ureadahead/pack &> /dev/null
rm -f ${WORKDIR}/dummysys/etc/X11/xorg.conf*
rm -f ${WORKDIR}/dummysys/etc/{hosts,hostname,mtab*,fstab}
if [ ! -L ${WORKDIR}/dummysys/etc/resolv.conf ] ; then
    rm -f ${WORKDIR}/dummysys/etc/resolv.conf
fi
rm -f ${WORKDIR}/dummysys/etc/udev/rules.d/70-persistent*
rm -f ${WORKDIR}/dummysys/etc/cups/ssl/{server.crt,server.key}
rm -f ${WORKDIR}/dummysys/etc/ssh/*key*
rm -f ${WORKDIR}/dummysys/var/lib/dbus/machine-id
rsync -a /dev/urandom ${WORKDIR}/dummysys/dev/

find ${WORKDIR}/dummysys/var/lock/ ${WORKDIR}/dummysys/var/backups/ ${WORKDIR}/dummysys/var/tmp/ ${WORKDIR}/dummysys/var/crash/ ${WORKDIR}/dummysys/var/lib/ubiquity/ -type f -exec rm -f {} \;

rm -rf ${WORKDIR}/dummysys/mnt/*
rm -rf ${WORKDIR}/dummysys/media/*
mkdir ${WORKDIR}/dummysys/media/cdrom
rm -f ${WORKDIR}/dummysys/etc/{group,passwd,shadow,shadow-,gshadow,gshadow-}
rm -f ${WORKDIR}/dummysys/etc/wicd/{wired-settings.conf,wireless-settings.conf}
rm -rf ${WORKDIR}/dummysys/etc/NetworkManager/system-connections/*
rm -f ${WORKDIR}/dummysys/etc/printcap
rm -f ${WORKDIR}/dummysys/etc/cups/printers.conf
touch ${WORKDIR}/dummysys/etc/printcap
touch ${WORKDIR}/dummysys/etc/cups/printers.conf
rm -rf ${WORKDIR}/dummysys/etc/apt/sources.list.d/*
rm -f ${WORKDIR}/dummysys/var/cache/apt/*pkgcache.bin
rm -f ${WORKDIR}/dummysys/var/lib/mlocate/*
rm -rf ${WORKDIR}/dummysys/var/lib/sudo/*
rm -rf ${WORKDIR}/dummysys/var/lib/AccountsService/users/*
rm -rf ${WORKDIR}/dummysys/var/lib/kdm/*
rm -rf ${WORKDIR}/dummysys/var/run/console/*
rm -f ${WORKDIR}/dummysys/etc/gdm3/gdm3.conf-custom
rm -f ${WORKDIR}/dummysys/etc/gdm3/custom.conf
rm -f ${WORKDIR}/dummysys/var/cache/gdm3/*

if [ ! -d /run ] ; then
    find ${WORKDIR}/dummysys/var/run/ ${WORKDIR}/dummysys/var/mail/ ${WORKDIR}/dummysys/var/spool/ -type f -exec rm -f {} \;
else
    find ${WORKDIR}/dummysys/var/mail/ ${WORKDIR}/dummysys/var/spool/ -type f -exec rm -f {} \;
    unlink ${WORKDIR}/dummysys/var/run
    cd ${WORKDIR}/dummysys/var
    ln -sf ../run run
fi

# ログファイルの作成
      log_msg "/var/log/下のファイルを抹消"
      find ${WORKDIR}/dummysys/var/log/ -type f -exec truncate -s 0 {} \;
      # update the timestamp to right now
      log_msg "/var/log下のファイルのタイムスタンプを更新"
      find ${WORKDIR}/dummysys/var/log/ -exec touch {} \;

# 所在地の変更
if [ -e ${WORKDIR}/dummysys/etc/default/locale ] ; then
    rm -f ${WORKDIR}/dummysys/etc/default/locale
fi
if [ -e ${WORKDIR}/dummysys/var/lib/locales/supported.d/local ] ; then
    rm -f ${WORKDIR}/dummysys/var/lib/locales/supported.d/local
fi

log_msg "Cleaning locate database within dummysys"
if [ -e ${WORKDIR}/dummysys/var/lib/mlocate/mlocate.db ]; then
    rm -f ${WORKDIR}/dummysys/var/lib/mlocate/mlocate.db
    updatedb -l 1 -o ${WORKDIR}/dummysys/var/lib/mlocate/mlocate.db
fi

log_msg "ライブシステム向けにいろいろクリーンアップ"
grep '^[^:]*:[^:]*:[0-9]:' /etc/passwd > ${WORKDIR}/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/passwd >> ${WORKDIR}/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/passwd >> ${WORKDIR}/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/passwd >> ${WORKDIR}/dummysys/etc/passwd

grep '^[^:]*:[^:]*:[0-9]:' /etc/group > ${WORKDIR}/dummysys/etc/group
grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/group >> ${WORKDIR}/dummysys/etc/group
grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/group >> ${WORKDIR}/dummysys/etc/group
grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/group >> ${WORKDIR}/dummysys/etc/group

grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> ${WORKDIR}/tmpusers1
grep '^[^:]*:[^:]*:[1-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> ${WORKDIR}/tmpusers2
grep '^[^:]*:[^:]*:[1-2][0-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> ${WORKDIR}/tmpusers3

cat ${WORKDIR}/tmpusers1 ${WORKDIR}/tmpusers2 ${WORKDIR}/tmpusers3 > ${WORKDIR}/tmpusers
rm -f ${WORKDIR}/tmpusers[0-9] &> /dev/null
cat ${WORKDIR}/tmpusers1 ${WORKDIR}/tmpusers2 ${WORKDIR}/tmpusers3 > ${WORKDIR}/tmpusers
rm -f ${WORKDIR}/tmpusers[0-9] &> /dev/null

cat ${WORKDIR}/tmpusers | while read LINE ;do
    echo ${LINE} | xargs -i sed -e 's/,{}$//g' ${WORKDIR}/dummysys/etc/group > ${WORKDIR}/dummysys/etc/group.new1
    echo ${LINE} | xargs -i sed -e 's/,{},/,/g' ${WORKDIR}/dummysys/etc/group.new1 > ${WORKDIR}/dummysys/etc/group.new2
    echo ${LINE} | xargs -i sed -e 's/:{}$/:/g' ${WORKDIR}/dummysys/etc/group.new2 > ${WORKDIR}/dummysys/etc/group.new3
    echo ${LINE} | xargs -i sed -e 's/:{},/:/g' ${WORKDIR}/dummysys/etc/group.new3 > ${WORKDIR}/dummysys/etc/group
    rm -f ${WORKDIR}/dummysys/etc/group.new* &> /dev/null
done

log_msg "自動ログイン設定"
[ ! -d ${WORKDIR}/dummysys/home ] && mkdir ${WORKDIR}/dummysys/home
chmod 755 /usr/share/initramfs-tools/scripts/casper-
bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin /usr/share/initramfs-tools/scripts/casper

log_msg "インターネット接続を確認しています"
netconnstatus=`dig | grep -o 'Got answer'` # report if ANY network hardware is connected
if [ "${netconnstatus}" ] ; then
    inetstatus=`wget -q --timeout=20 --spider www.ubuntu.com; echo $?`
    if [ "${inetstatus}" -ne 0 ] ; then # if above failed, do a double-check with google
        log_msg "   Could not connect to www.ubuntu.com"
        inetstatus=`wget -q --timeout=20 --spider www.google.com; echo $?`
        if [ "${inetstatus}" -ne 0 ] ; then # if above failed, do a triple-check with cisco
            log_msg "   Could not connect to www.google.com"
            inetstatus=`wget -q --timeout=20 --spider www.cisco.com; echo $?`
            if [ "${inetstatus}" -ne 0 ] ; then # Internet connectivity fail
                log_msg "   Could not connect to www.cisco.com"
            fi
        fi
    fi
else
    inetstatus=1 # パッケージの新規ダウンロードを抑制
fi

if [ "${inetstatus}" -eq 0 ] ; then # internet connection detected
    log_msg "connection to internet detected"
    log_msg "Updating repos"
    apt-get update >>${WORKDIR}/bodhibuilder.log
    log_msg "Installing dpkg-dev if it's not already installed"
    apt-get install -y -q --no-install-recommends dpkg-dev >>${WORKDIR}/bodhibuilder.log #CHARLES
    dlpkg_all=`cat /etc/bodhibuilder/debs/amd64/00_packages.list`
    dlpkgfail="0"
    log_msg "  downloading latest deb files for ${ARCH} packages:"
    log_msg "${dlpkg_all}"
    cd ${WORKDIR} && mkdir dlpkgtempdir && cd dlpkgtempdir

    # download pkgs
    apt-get download ${dlpkg_all} | ${tee_log}
    chmod 755 ./* # still working in dlpkgtempdir

    # make sure ALL files were successfully downloaded
    for dlpkgchk in ${dlpkg_all} ; do
        if [ ! -e ./${dlpkgchk}_* ] ; then
            dlpkgfail="1" && log_msg "dlpkgfail"
            echo "file ${dlpkgchk}_(Some.New.Rev.Num)  -  does NOT exist." >>${WORKDIR}/bodhibuilder.log
        else
            dlpkgchkname=`ls -b ./${dlpkgchk}_*`
            echo "file ${dlpkgchkname} exists" >>${WORKDIR}/bodhibuilder.log
        fi
    done

    if [ "${dlpkgfail}" = "1" ] ; then
      log_msg "Not able to download all deb files"
      cd ${WORKDIR} && rm -rf ./dlpkgtempdir
    fi

else # no internet connection detected
    log_msg "no connection to internet detected"
    log_msg "...not downloading latest uefi pool debs"
    dlpkgfail="1" && log_msg "dlpkgfail"
    echo "pwd -->  ${PWD}" >>${WORKDIR}/bodhibuilder.log
fi

log_msg "EFI関係のファイルをコピー"
yes | cp -av /etc/bodhibuilder/uefi/* ${WORKDIR}/ISOTMP/ >>${WORKDIR}/bodhibuilder.log

# UEFI GRUBに名前を追加
sed -i 's/__DISTNAME__/'"${DISTNAME}"'/g' ${WORKDIR}/ISOTMP/boot/grub/grub.cfg

if [ "${dlpkgfail}" == "0" ] ; then # successful downloads
    log_msg "debファイルのダウンロードが完了しています"
    yes | rm -rf ${WORKDIR}/ISOTMP/dists/pool/*
    yes | mv ${WORKDIR}/dlpkgtempdir/* ${WORKDIR}/ISOTMP/dists/pool/ # mv all new files from dlpkgtempdir into pool
    cd ${WORKDIR}
    yes | rm -rf ./dlpkgtempdir
else
    log_msg "something was wrong with downloading deb files,"
    log_msg "no new deb files being copied into pool so as to maintain compatibility"
    pwd >>${WORKDIR}/bodhibuilder.log
    log_msg "Removing old debs from pool"
    yes | rm -vrf /etc/bodhibuilder/uefi/dists/pool/* >>${WORKDIR}/bodhibuilder.log
    log_msg "Copying pre-existing arch-specific debs into pool"
    yes | cp -av /etc/bodhibuilder/debs/amd64/* /etc/bodhibuilder/uefi/dists/pool/ >>${WORKDIR}/bodhibuilder.log
fi

# Ubiquityインストール用のリポジトリ作成
if [ -e "${WORKDIR}/ISOTMP/dists" ] ; then
    rm -f ${WORKDIR}/ISOTMP/dists/Packages.gz | ${tee_log}
else
    mkdir ${WORKDIR}/ISOTMP/dists
fi
  # Creating Packages.gz so the repo is valid
log_msg "Creating ${WORKDIR}/ISOTMP/dists/Packages.gz"
cd ${WORKDIR}/ISOTMP/dists/
dpkg-scanpackages pool /dev/null 2>>${WORKDIR}/bodhibuilder.log | gzip -9c > ./Packages.gz
cd -

log_msg "Copying any preseed files"
cp /etc/bodhibuilder/preseed/* ${WORKDIR}/ISOTMP/preseed/

#BOOT Type is isolinux
log_msg "Copying memtest86+ for the live system"
cp /boot/memtest86+.bin ${WORKDIR}/ISOTMP/install/memtest

# ISOLINUXについて
if [ ! -f /etc/bodhibuilder/customisolinux/isolinux.cfg ] ; then # no custom isolinux (bb default)
    log_msg "Creating isolinux setup for the live system"
    find /usr/lib/ -name 'isohdpfx.bin' -exec cp -f {} ${WORKDIR}/ISOTMP/isolinux/ \;
    find /usr/lib/ -name 'isolinux.bin' -exec cp -f {} ${WORKDIR}/ISOTMP/isolinux/ \;
    if [ "${UBUVERSION}" -le 14 ] ; then
        VESAMENU=`find /usr/lib/syslinux/modules/bios/ -name "vesamenu.c32" | grep "vesamenu.c32"`
        cp ${VESAMENU} ${WORKDIR}/ISOTMP/isolinux/
    elif [ "${UBUVERSION}" -gt 14 ] ; then
        # Copy the c32 files into isolinux ##### TEST
        c32files=`find /usr/lib/ -name "*.c32" | grep "/bios/"`
        for c in ${c32files} ; do
            cp ${c} ${WORKDIR}/ISOTMP/isolinux/
        done
    fi

    sed -e 's/__DISTNAME__/'"${DISTNAME}"'/g' /etc/bodhibuilder/isolinux/isolinux.cfg.vesamenu > ${WORKDIR}/ISOTMP/isolinux/isolinux.cfg
cp /etc/bodhibuilder/isolinux/splash.png ${WORKDIR}/ISOTMP/isolinux/splash.png
else # custom isolinux
    log_msg "Copying your custom isolinux setup to the live system"
    cp /etc/bodhibuilder/customisolinux/* ${WORKDIR}/ISOTMP/isolinux/ &> /dev/null
fi


